// Generated by gencpp from file object_service/DemoResponse.msg
// DO NOT EDIT!


#ifndef OBJECT_SERVICE_MESSAGE_DEMORESPONSE_H
#define OBJECT_SERVICE_MESSAGE_DEMORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_service
{
template <class ContainerAllocator>
struct DemoResponse_
{
  typedef DemoResponse_<ContainerAllocator> Type;

  DemoResponse_()
    : status(false)
    , num(0.0)
    , text()  {
    }
  DemoResponse_(const ContainerAllocator& _alloc)
    : status(false)
    , num(0.0)
    , text(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef float _num_type;
  _num_type num;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _text_type;
  _text_type text;





  typedef boost::shared_ptr< ::object_service::DemoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_service::DemoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DemoResponse_

typedef ::object_service::DemoResponse_<std::allocator<void> > DemoResponse;

typedef boost::shared_ptr< ::object_service::DemoResponse > DemoResponsePtr;
typedef boost::shared_ptr< ::object_service::DemoResponse const> DemoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_service::DemoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_service::DemoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_service::DemoResponse_<ContainerAllocator1> & lhs, const ::object_service::DemoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.num == rhs.num &&
    lhs.text == rhs.text;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_service::DemoResponse_<ContainerAllocator1> & lhs, const ::object_service::DemoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::object_service::DemoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_service::DemoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_service::DemoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_service::DemoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_service::DemoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_service::DemoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_service::DemoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee1972fe11b9b57d8859f91e9398dc16";
  }

  static const char* value(const ::object_service::DemoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee1972fe11b9b57dULL;
  static const uint64_t static_value2 = 0x8859f91e9398dc16ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_service::DemoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_service/DemoResponse";
  }

  static const char* value(const ::object_service::DemoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_service::DemoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# header\n"
"bool status\n"
"# body\n"
"float32 num\n"
"string text\n"
"\n"
;
  }

  static const char* value(const ::object_service::DemoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_service::DemoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.num);
      stream.next(m.text);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DemoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_service::DemoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_service::DemoResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "num: ";
    Printer<float>::stream(s, indent + "  ", v.num);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.text);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_SERVICE_MESSAGE_DEMORESPONSE_H
